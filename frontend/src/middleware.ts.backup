import { NextResponse, NextRequest } from 'next/server'
import { jwtVerify } from 'jose'
import { getCSPHeaderWithReporting } from './lib/security/csp'

/**
 * ðŸ”’ SECURE Middleware with JWT Authentication
 * Production-ready authentication verification
 */

const JWT_SECRET = new TextEncoder().encode(
  process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production'
)

// Define public routes that don't require authentication
const publicRoutes = ["/", "/login", "/register", "/forgot-password", "/reset-password"]

// Define admin-only routes
const adminRoutes = ["/admin", "/admin/users", "/admin/settings"]

// Define team-based routes that require specific permissions
const teamRoutes = {
  "/accounts": ["view_accounts"],
  "/accounts/manage": ["manage_accounts"],
  "/analytics": ["view_analytics"],
  "/analytics/manage": ["manage_analytics"],
  "/settings": ["view_settings"],
  "/settings/manage": ["manage_settings"],
  "/team": ["view_users"],
  "/team/manage": ["manage_users"],
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  
  // Skip middleware for static assets and Next.js internals
  if (
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/api/_next/') ||
    pathname.includes('.') // Static files (images, fonts, etc.)
  ) {
    return NextResponse.next()
  }

  console.log(`ðŸ”’ Security middleware: ${request.method} ${pathname}`)

  // 1. AUTHENTICATION PROTECTION (JWT verification)
  const protectedPaths = ['/dashboard', '/admin', '/api/admin', '/api/businesses', '/api/accounts']
  const isProtectedPath = protectedPaths.some(path => pathname.startsWith(path))
  
  if (isProtectedPath) {
    // âœ… SECURE: Get JWT from HTTP-only cookie
    const token = request.cookies.get('auth-token')?.value
    
    if (!token) {
      // For API routes, return 401
      if (pathname.startsWith('/api/')) {
        return NextResponse.json(
          { error: 'Unauthorized', message: 'Authentication required' },
          { status: 401 }
        )
      } else {
        // For pages, redirect to login
        const loginUrl = new URL('/login', request.url)
        loginUrl.searchParams.set('redirect', pathname)
        return NextResponse.redirect(loginUrl)
      }
    }
    
    // âœ… SECURE: Verify JWT token
    try {
      const { payload } = await jwtVerify(token, JWT_SECRET)
      
      // Add user info to request headers for API routes
      const response = NextResponse.next()
      response.headers.set('x-user-id', payload.userId as string)
      response.headers.set('x-user-role', payload.role as string)
      response.headers.set('x-user-email', payload.email as string)
      
      // Continue with authenticated request
      return response
      
    } catch (error) {
      console.error('JWT verification failed:', error)
      
      // Invalid token - clear cookie and redirect/return error
      const response = pathname.startsWith('/api/') 
        ? NextResponse.json({ error: 'Invalid token' }, { status: 401 })
        : NextResponse.redirect(new URL('/login', request.url))
      
      response.cookies.delete('auth-token')
      return response
    }
  }

  // 2. ADMIN ROUTE PROTECTION (Enhanced)
  const adminPaths = ['/admin', '/api/admin']
  const isAdminPath = adminPaths.some(path => pathname.startsWith(path))
  
  if (isAdminPath) {
    const token = request.cookies.get('auth-token')?.value
    
    if (!token) {
      return pathname.startsWith('/api/')
        ? NextResponse.json({ error: 'Admin access required' }, { status: 403 })
        : NextResponse.redirect(new URL('/login', request.url))
    }
    
    try {
      const { payload } = await jwtVerify(token, JWT_SECRET)
      const userRole = payload.role as string
      
      if (userRole !== 'admin' && userRole !== 'superuser') {
        return pathname.startsWith('/api/')
          ? NextResponse.json({ error: 'Admin privileges required' }, { status: 403 })
          : NextResponse.redirect(new URL('/dashboard', request.url))
      }
      
    } catch (error) {
      return pathname.startsWith('/api/')
        ? NextResponse.json({ error: 'Invalid admin token' }, { status: 401 })
        : NextResponse.redirect(new URL('/login', request.url))
    }
  }

  // 3. SECURITY HEADERS
  const response = NextResponse.next()
  
  // Content Security Policy - use proper development/production CSP
  response.headers.set('Content-Security-Policy', getCSPHeaderWithReporting())
  
  // Security headers
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('Referrer-Policy', 'origin-when-cross-origin')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  
  // HTTPS enforcement
  if (process.env.NODE_ENV === 'production') {
    response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains')
  }

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}
