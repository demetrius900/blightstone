"use client"

import React, { createContext, useContext, ReactNode } from 'react'
import { getCurrentDataSource } from '../lib/env-config'
import { DemoProvider, useDemoState } from './DemoStateContext'
import { ProductionDataProvider, useProductionData } from './ProductionDataContext'

// Unified interface that works with both demo and production data
interface UnifiedDataContextType {
  // Data
  businesses: any[]
  accounts: any[]
  transactions: any[]
  organizations: any[]
  currentOrganization: any
  
  // Actions
  createBusiness: (data: any) => Promise<void>
  updateBusiness: (data: any) => Promise<void>
  deleteBusiness: (id: string) => Promise<void>
  
  // Loading states
  loading: {
    businesses: boolean
    accounts: boolean
    transactions: boolean
  }
  
  // Meta
  dataSource: 'demo' | 'supabase'
}

const UnifiedDataContext = createContext<UnifiedDataContextType | undefined>(undefined)

// Hook that automatically uses the right data source
export function useUnifiedData(): UnifiedDataContextType {
  const context = useContext(UnifiedDataContext)
  if (context === undefined) {
    throw new Error('useUnifiedData must be used within a UnifiedDataProvider')
  }
  return context
}

// Component that adapts demo state to unified interface
function DemoDataAdapter({ children }: { children: ReactNode }) {
  const { state, createBusiness, updateBusiness, deleteBusiness } = useDemoState()
  
  const unifiedValue: UnifiedDataContextType = {
    // Map demo state to unified interface
    businesses: state.businesses,
    accounts: state.accounts,
    transactions: state.transactions,
    organizations: state.organizations,
    currentOrganization: state.currentOrganization,
    
    // Map demo actions
    createBusiness,
    updateBusiness,
    deleteBusiness,
    
    // Map loading states
    loading: {
      businesses: state.loading.businesses,
      accounts: state.loading.accounts,
      transactions: state.loading.transactions,
    },
    
    dataSource: 'demo'
  }
  
  return (
    <UnifiedDataContext.Provider value={unifiedValue}>
      {children}
    </UnifiedDataContext.Provider>
  )
}

// Component that adapts production state to unified interface
function ProductionDataAdapter({ children }: { children: ReactNode }) {
  const { state, createBusiness, updateBusiness, deleteBusiness } = useProductionData()
  
  const unifiedValue: UnifiedDataContextType = {
    // Map production state to unified interface
    businesses: state.businesses,
    accounts: [], // TODO: Map from state.adAccounts
    transactions: state.transactions,
    organizations: state.organizations,
    currentOrganization: state.currentOrganization,
    
    // Map production actions
    createBusiness,
    updateBusiness,
    deleteBusiness,
    
    // Map loading states
    loading: {
      businesses: state.loading.businesses,
      accounts: state.loading.adAccounts,
      transactions: state.loading.transactions,
    },
    
    dataSource: 'supabase'
  }
  
  return (
    <UnifiedDataContext.Provider value={unifiedValue}>
      {children}
    </UnifiedDataContext.Provider>
  )
}

// Main provider that chooses the right data source based on environment
export function UnifiedDataProvider({ children }: { children: ReactNode }) {
  const dataSource = getCurrentDataSource()
  
  if (dataSource === 'demo') {
    return (
      <DemoProvider>
        <DemoDataAdapter>
          {children}
        </DemoDataAdapter>
      </DemoProvider>
    )
  } else {
    return (
      <ProductionDataProvider>
        <ProductionDataAdapter>
          {children}
        </ProductionDataAdapter>
      </ProductionDataProvider>
    )
  }
} 