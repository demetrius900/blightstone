"use client"

import { useState, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Users, ChevronRight, CheckCircle, AlertTriangle, Clock, Settings } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import Link from "next/link"
import { cn } from "@/lib/utils"
import { DataTable } from "@/components/ui/data-table"
import type { ColumnDef } from "@tanstack/react-table"
import { MOCK_DATA } from "@/data/mock-admin-data"
import type { Team } from "@/data/mock-admin-data"

export default function TeamsPage() {
  const [teams] = useState(MOCK_DATA.teams)
  const [selectedStatus, setSelectedStatus] = useState("all")

  const filteredTeams = useMemo(() => {
    return teams.filter((team) => {
      const statusFilter = selectedStatus === "all" || team.status === selectedStatus
      return statusFilter
    })
  }, [teams, selectedStatus])

  const getStatusConfig = (status: Team["status"]) => {
    const configs = {
      active: {
        label: "Active",
        className: "bg-green-100 text-green-800 border-green-200",
        icon: CheckCircle,
        color: "text-green-600",
      },
      at_capacity: {
        label: "At Capacity",
        className: "bg-red-100 text-red-800 border-red-200",
        icon: AlertTriangle,
        color: "text-red-600",
      },
      needs_backup: {
        label: "Needs Backup",
        className: "bg-purple-100 text-purple-800 border-purple-200",
        icon: Clock,
        color: "text-purple-600",
      },
      suspended: {
        label: "Suspended",
        className: "bg-gray-100 text-gray-800 border-gray-200",
        icon: AlertTriangle,
        color: "text-gray-600",
      },
    }
    return configs[status] || configs.active
  }

  const getStatusBadge = (status: Team["status"]) => {
    const statusConfig = getStatusConfig(status)
    const StatusIcon = statusConfig.icon
    return (
      <Badge className={cn("border", statusConfig.className)}>
        <StatusIcon className={cn("h-3 w-3 mr-1", statusConfig.color)} />
        {statusConfig.label}
      </Badge>
    )
  }

  const columns: ColumnDef<Team>[] = [
    {
      accessorKey: "name",
      header: "Team",
      size: 250,
      cell: ({ row }) => {
        const team = row.original
        return (
          <div className="flex items-center gap-2 min-w-0">
            <div className="h-8 w-8 rounded-lg bg-gradient-to-r from-[#b4a0ff]/20 to-[#ffb4a0]/20 flex items-center justify-center flex-shrink-0">
              <Users className="h-4 w-4 text-foreground" />
            </div>
            <div className="min-w-0 flex-1">
              <div className="font-medium truncate">{team.name}</div>
              <div className="text-sm text-muted-foreground truncate">{team.description}</div>
            </div>
          </div>
        )
      },
    },
    {
      accessorKey: "organizationsCount",
      header: "Organizations",
      size: 120,
      cell: ({ row }) => {
        const team = row.original
        return (
          <div>
            <div className="font-medium">{team.organizationsCount} organizations</div>
            <div className="text-sm text-muted-foreground">{team.activeBusinesses} businesses</div>
          </div>
        )
      },
    },
    {
      accessorKey: "utilizationRate",
      header: "Utilization",
      size: 100,
      cell: ({ row }) => {
        const team = row.original
        const isHighUtilization = team.utilizationRate >= 95
        return (
          <div className="text-center">
            <div className={`font-medium ${isHighUtilization ? "text-red-600" : "text-foreground"}`}>
              {team.utilizationRate}%
            </div>
            <div className="text-xs text-muted-foreground">
              {team.organizationsCount}/{team.capacity}
            </div>
          </div>
        )
      },
    },
    {
      accessorKey: "status",
      header: "Status",
      size: 120,
      cell: ({ row }) => getStatusBadge(row.original.status),
    },
    {
      id: "actions",
      header: "Actions",
      size: 100,
      cell: ({ row }) => {
        const team = row.original
        return (
          <div className="flex items-center gap-1 justify-end">
            <Button variant="ghost" size="sm">
              <Settings className="h-4 w-4" />
            </Button>
            <Link href={`/admin/teams/${team.id}`}>
              <Button variant="ghost" size="sm">
                <ChevronRight className="h-4 w-4" />
              </Button>
            </Link>
          </div>
        )
      },
    },
  ]

  return (
    <div className="h-full flex flex-col overflow-hidden">
      <div className="flex-shrink-0 p-4 pb-0">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-4">
            <Select value={selectedStatus} onValueChange={setSelectedStatus}>
              <SelectTrigger className="w-[140px]">
                <SelectValue placeholder="All Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="at_capacity">At Capacity</SelectItem>
                <SelectItem value="needs_backup">Needs Backup</SelectItem>
                <SelectItem value="suspended">Suspended</SelectItem>
              </SelectContent>
            </Select>

            <div className="text-sm text-muted-foreground">{filteredTeams.length} teams total</div>
          </div>
        </div>
      </div>

      <div className="flex-1 min-h-0 px-6 pb-6">
        <div className="h-full">
          <DataTable columns={columns} data={filteredTeams} searchKey="name" searchPlaceholder="Search teams..." />
        </div>
      </div>
    </div>
  )
}
