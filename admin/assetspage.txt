"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Search, RefreshCw, ExternalLink, AlertTriangle, CheckCircle, Clock, LinkIcon } from "lucide-react"
import { formatDistanceToNow } from "date-fns"
import { BindAssetDialog } from "@/components/admin/bind-asset-dialog"

interface BusinessManager {
  id: string
  name: string
  bmId: string
  status: "connected" | "disconnected" | "syncing"
  lastSync: string
  totalAccounts: number
  usedAccounts: number
  maxAccounts: number
  assignedOrganization?: string
  monthlySpend: number
  currency: string
}

interface AdAccount {
  id: string
  name: string
  accountId: string
  bmId: string
  bmName: string
  status: "active" | "inactive" | "suspended" | "pending"
  platform: "facebook" | "instagram" | "google"
  assignedBusiness?: string
  assignedOrganization?: string
  dailyBudget: number
  monthlySpend: number
  currency: string
  lastActivity: string
  expiryDate?: string
}

const mockBusinessManagers: BusinessManager[] = [
  {
    id: "bm-001",
    name: "AdHub Primary BM",
    bmId: "123456789012345",
    status: "connected",
    lastSync: "2024-06-19T15:30:00",
    totalAccounts: 12,
    usedAccounts: 8,
    maxAccounts: 15,
    assignedOrganization: "TechCorp Solutions",
    monthlySpend: 45000,
    currency: "USD",
  },
  {
    id: "bm-002",
    name: "AdHub Secondary BM",
    bmId: "234567890123456",
    status: "connected",
    lastSync: "2024-06-19T15:25:00",
    totalAccounts: 7,
    usedAccounts: 5,
    maxAccounts: 10,
    monthlySpend: 28000,
    currency: "USD",
  },
  {
    id: "bm-003",
    name: "AdHub Backup BM",
    bmId: "345678901234567",
    status: "syncing",
    lastSync: "2024-06-19T14:45:00",
    totalAccounts: 3,
    usedAccounts: 2,
    maxAccounts: 8,
    monthlySpend: 12000,
    currency: "USD",
  },
]

const mockAdAccounts: AdAccount[] = [
  {
    id: "acc-001",
    name: "TechCorp Main Campaign",
    accountId: "act_1234567890",
    bmId: "123456789012345",
    bmName: "AdHub Primary BM",
    status: "active",
    platform: "facebook",
    assignedBusiness: "TechCorp Marketing Division",
    assignedOrganization: "TechCorp Solutions",
    dailyBudget: 500,
    monthlySpend: 12000,
    currency: "USD",
    lastActivity: "2024-06-19T14:30:00",
    expiryDate: "2024-07-15T00:00:00",
  },
  {
    id: "acc-002",
    name: "DPA Retargeting Campaigns",
    accountId: "act_2345678901",
    bmId: "123456789012345",
    bmName: "AdHub Primary BM",
    status: "active",
    platform: "facebook",
    assignedBusiness: "DPA Campaign Management",
    assignedOrganization: "Digital Pro Agency",
    dailyBudget: 300,
    monthlySpend: 8500,
    currency: "USD",
    lastActivity: "2024-06-19T13:45:00",
  },
  {
    id: "acc-003",
    name: "Unassigned Account #1",
    accountId: "act_3456789012",
    bmId: "234567890123456",
    bmName: "AdHub Secondary BM",
    status: "inactive",
    platform: "facebook",
    dailyBudget: 0,
    monthlySpend: 0,
    currency: "USD",
    lastActivity: "2024-06-18T10:20:00",
  },
  {
    id: "acc-004",
    name: "StartupX Growth Ads",
    accountId: "act_4567890123",
    bmId: "234567890123456",
    bmName: "AdHub Secondary BM",
    status: "pending",
    platform: "facebook",
    dailyBudget: 0,
    monthlySpend: 0,
    currency: "USD",
    lastActivity: "2024-06-19T09:15:00",
  },
]

export default function AssetsPage() {
  const [businessManagers, setBusinessManagers] = useState(mockBusinessManagers)
  const [adAccounts, setAdAccounts] = useState(mockAdAccounts)
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("all")
  const [assignmentFilter, setAssignmentFilter] = useState("all")
  const [bindingDialogOpen, setBindingDialogOpen] = useState(false)
  const [selectedAsset, setSelectedAsset] = useState<{
    type: "business-manager" | "ad-account"
    name: string
    id: string
  } | null>(null)

  const filteredBMs = businessManagers.filter((bm) => {
    const matchesSearch = bm.name.toLowerCase().includes(searchTerm.toLowerCase()) || bm.bmId.includes(searchTerm)
    const matchesStatus = statusFilter === "all" || bm.status === statusFilter
    return matchesSearch && matchesStatus
  })

  const filteredAccounts = adAccounts.filter((acc) => {
    const matchesSearch =
      acc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      acc.accountId.includes(searchTerm) ||
      acc.bmName.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesStatus = statusFilter === "all" || acc.status === statusFilter
    const matchesAssignment =
      assignmentFilter === "all" ||
      (assignmentFilter === "assigned" && acc.assignedBusiness) ||
      (assignmentFilter === "unassigned" && !acc.assignedBusiness)
    return matchesSearch && matchesStatus && matchesAssignment
  })

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      connected: { label: "Connected", variant: "default" as const, icon: CheckCircle },
      disconnected: { label: "Disconnected", variant: "destructive" as const, icon: AlertTriangle },
      syncing: { label: "Syncing", variant: "secondary" as const, icon: Clock },
      active: { label: "Active", variant: "default" as const, icon: CheckCircle },
      inactive: { label: "Inactive", variant: "secondary" as const, icon: Clock },
      suspended: { label: "Suspended", variant: "destructive" as const, icon: AlertTriangle },
      pending: { label: "Pending", variant: "secondary" as const, icon: Clock },
    }

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.active
    const Icon = config.icon

    return (
      <Badge variant={config.variant} className="flex items-center gap-1">
        <Icon className="h-3 w-3" />
        {config.label}
      </Badge>
    )
  }

  const handleSync = () => {
    // Handle Dolphin sync
  }

  const handleBindAsset = (type: "business-manager" | "ad-account", name: string, id: string) => {
    setSelectedAsset({ type, name, id })
    setBindingDialogOpen(true)
  }

  const handleAssetBound = (organizationId: string, businessId?: string) => {
    if (selectedAsset?.type === "business-manager") {
      setBusinessManagers((prev) =>
        prev.map((bm) => (bm.id === selectedAsset.id ? { ...bm, assignedOrganization: organizationId } : bm)),
      )
    } else if (selectedAsset?.type === "ad-account") {
      setAdAccounts((prev) =>
        prev.map((acc) =>
          acc.id === selectedAsset.id
            ? {
                ...acc,
                assignedOrganization: organizationId,
                assignedBusiness: businessId || acc.assignedBusiness,
              }
            : acc,
        ),
      )
    }

    alert(`Successfully bound ${selectedAsset?.name} to organization!`)
  }

  return (
    <div className="p-4 space-y-4">
      {/* Header Actions */}
      <div className="flex justify-end gap-2">
        <Button onClick={handleSync} variant="outline" size="sm">
          <RefreshCw className="mr-2 h-4 w-4" />
          Sync with Dolphin
        </Button>
        <Button variant="outline" size="sm">
          <ExternalLink className="mr-2 h-4 w-4" />
          Open Dolphin Cloud
        </Button>
      </div>

      {/* Tabs */}
      <Tabs defaultValue="business-managers" className="space-y-4">
        <TabsList>
          <TabsTrigger value="business-managers">Business Managers ({businessManagers.length})</TabsTrigger>
          <TabsTrigger value="ad-accounts">Ad Accounts ({adAccounts.length})</TabsTrigger>
        </TabsList>

        {/* Business Managers Tab */}
        <TabsContent value="business-managers" className="space-y-4">
          {/* Filters */}
          <div className="flex items-center gap-4">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search business managers..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="All Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="connected">Connected</SelectItem>
                <SelectItem value="syncing">Syncing</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Table */}
          <div className="border rounded-lg">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Business Manager</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Accounts</TableHead>
                  <TableHead>Bound To</TableHead>
                  <TableHead>Last Sync</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredBMs.map((bm) => (
                  <TableRow key={bm.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{bm.name}</div>
                        <div className="text-sm text-muted-foreground font-mono">{bm.bmId}</div>
                      </div>
                    </TableCell>
                    <TableCell>{getStatusBadge(bm.status)}</TableCell>
                    <TableCell>
                      <div className="text-sm">
                        {bm.usedAccounts}/{bm.maxAccounts} used
                        <div className="w-full bg-gray-200 rounded-full h-1.5 mt-1">
                          <div
                            className="bg-blue-600 h-1.5 rounded-full"
                            style={{ width: `${(bm.usedAccounts / bm.maxAccounts) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      {bm.assignedOrganization ? (
                        <Badge variant="outline">{bm.assignedOrganization}</Badge>
                      ) : (
                        <span className="text-muted-foreground text-sm">Unbound</span>
                      )}
                    </TableCell>
                    <TableCell className="text-sm">
                      {formatDistanceToNow(new Date(bm.lastSync), { addSuffix: true })}
                    </TableCell>
                    <TableCell>
                      <Button
                        size="sm"
                        className="bg-purple-600 hover:bg-purple-700 text-white"
                        onClick={() => handleBindAsset("business-manager", bm.name, bm.id)}
                      >
                        <LinkIcon className="h-3 w-3 mr-1" />
                        Bind
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </TabsContent>

        {/* Ad Accounts Tab */}
        <TabsContent value="ad-accounts" className="space-y-4">
          {/* Filters */}
          <div className="flex items-center gap-4">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search ad accounts..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="All Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
                <SelectItem value="pending">Pending</SelectItem>
              </SelectContent>
            </Select>
            <Select value={assignmentFilter} onValueChange={setAssignmentFilter}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="All Binding" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="assigned">Bound</SelectItem>
                <SelectItem value="unassigned">Unbound</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Table */}
          <div className="border rounded-lg">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Ad Account</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Business Manager</TableHead>
                  <TableHead>Bound To</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredAccounts.map((acc) => (
                  <TableRow key={acc.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{acc.name}</div>
                        <div className="text-sm text-muted-foreground font-mono">{acc.accountId}</div>
                      </div>
                    </TableCell>
                    <TableCell>{getStatusBadge(acc.status)}</TableCell>
                    <TableCell>
                      <div className="text-sm">
                        <div>{acc.bmName}</div>
                        <div className="text-muted-foreground font-mono">{acc.bmId}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      {acc.assignedBusiness ? (
                        <div>
                          <Badge variant="outline" className="mb-1">
                            {acc.assignedBusiness}
                          </Badge>
                          <div className="text-xs text-muted-foreground">{acc.assignedOrganization}</div>
                        </div>
                      ) : (
                        <span className="text-muted-foreground text-sm">Unbound</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <Button
                        size="sm"
                        className="bg-purple-600 hover:bg-purple-700 text-white"
                        onClick={() => handleBindAsset("ad-account", acc.name, acc.id)}
                      >
                        <LinkIcon className="h-3 w-3 mr-1" />
                        Bind
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </TabsContent>
      </Tabs>

      <BindAssetDialog
        open={bindingDialogOpen}
        onOpenChange={setBindingDialogOpen}
        assetType={selectedAsset?.type || "business-manager"}
        assetName={selectedAsset?.name || ""}
        assetId={selectedAsset?.id || ""}
        onBind={handleAssetBound}
      />
    </div>
  )
}
