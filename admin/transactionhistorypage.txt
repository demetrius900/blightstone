"use client"

import { useState, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { StatusBadge } from "@/components/status-badge"
import { Download } from "lucide-react"
import { formatDistanceToNow } from "date-fns"
import { DataTable } from "@/components/ui/data-table"
import type { ColumnDef } from "@tanstack/react-table"

interface TransactionHistory {
  id: string
  organizationName: string
  businessName: string
  adAccountName: string
  type: "topup" | "refund" | "adjustment"
  amount: number
  fee: number
  status: "completed" | "failed" | "pending"
  processedAt: string
}

// Generate mock transaction history
const generateMockTransactions = (count: number): TransactionHistory[] => {
  const transactions: TransactionHistory[] = []
  const types: TransactionHistory["type"][] = ["topup", "refund", "adjustment"]
  const statuses: TransactionHistory["status"][] = ["completed", "failed", "pending"]

  for (let i = 1; i <= count; i++) {
    transactions.push({
      id: `txn-${i.toString().padStart(3, "0")}`,
      organizationName: `Organization ${i}`,
      businessName: `Business ${i}`,
      adAccountName: `Ad Account ${i}`,
      type: types[Math.floor(Math.random() * types.length)],
      amount: Math.floor(Math.random() * 10000) + 500,
      fee: Math.floor(Math.random() * 200) + 25,
      status: statuses[Math.floor(Math.random() * statuses.length)],
      processedAt: new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString(),
    })
  }
  return transactions.sort((a, b) => new Date(b.processedAt).getTime() - new Date(a.processedAt).getTime())
}

export default function TransactionHistoryPage() {
  const [transactionHistory] = useState(() => generateMockTransactions(1000))
  const [typeFilter, setTypeFilter] = useState("all")

  const filteredTransactions = useMemo(() => {
    return transactionHistory.filter((txn) => {
      const matchesType = typeFilter === "all" || txn.type === typeFilter
      return matchesType
    })
  }, [transactionHistory, typeFilter])

  const columns: ColumnDef<TransactionHistory>[] = [
    {
      accessorKey: "organizationName",
      header: "Transaction",
      size: 180,
      cell: ({ row }) => {
        const txn = row.original
        return (
          <div className="min-w-0">
            <div className="font-medium text-sm truncate">{txn.businessName}</div>
            <div className="text-xs text-muted-foreground truncate">{txn.organizationName}</div>
          </div>
        )
      },
    },
    {
      accessorKey: "adAccountName",
      header: "Ad Account",
      size: 120,
      cell: ({ row }) => <div className="text-xs truncate">{row.original.adAccountName}</div>,
    },
    {
      accessorKey: "type",
      header: "Type",
      size: 80,
      cell: ({ row }) => <div className="text-xs capitalize">{row.original.type}</div>,
    },
    {
      accessorKey: "amount",
      header: "Amount",
      size: 100,
      cell: ({ row }) => (
        <div className="font-medium text-green-600 text-sm">${row.original.amount.toLocaleString()}</div>
      ),
    },
    {
      accessorKey: "fee",
      header: "Fee",
      size: 80,
      cell: ({ row }) => <div className="text-sm">${row.original.fee}</div>,
    },
    {
      accessorKey: "status",
      header: "Status",
      size: 80,
      cell: ({ row }) => <StatusBadge status="active" size="sm" />,
    },
    {
      accessorKey: "processedAt",
      header: "Processed",
      size: 100,
      cell: ({ row }) => (
        <div className="text-xs">{formatDistanceToNow(new Date(row.original.processedAt), { addSuffix: true })}</div>
      ),
    },
  ]

  return (
    <div className="h-full flex flex-col overflow-hidden">
      <div className="flex-shrink-0 p-4 pb-0">
        <div className="flex items-center justify-between">
          <div className="text-sm text-muted-foreground">{transactionHistory.length} transactions total</div>
          <Button variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Export CSV
          </Button>
        </div>
      </div>

      <div className="flex-1 min-h-0 px-6 pb-6">
        <div className="h-full">
          <DataTable
            columns={columns}
            data={filteredTransactions}
            searchKey="organizationName"
            searchPlaceholder="Search transactions..."
          />
        </div>
      </div>
    </div>
  )
}
