"use client"

import { Building2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useState } from "react"
import { DataTable } from "@/components/ui/data-table"
import type { ColumnDef } from "@tanstack/react-table"
import { Badge } from "@/components/ui/badge"
import { StatusBadge } from "@/components/status-badge"
import { ChevronRight } from "lucide-react"
import Link from "next/link"
import { MOCK_DATA } from "@/data/mock-admin-data"
import type { Organization } from "@/data/mock-admin-data"

export default function OrganizationsPage() {
  const [organizations] = useState(MOCK_DATA.extended.organizations)
  const [selectedTeam, setSelectedTeam] = useState("all")
  const [selectedStatus, setSelectedStatus] = useState("all")
  const [selectedPlan, setSelectedPlan] = useState("all")

  const filteredOrganizations = organizations.filter((org) => {
    const teamFilter = selectedTeam === "all" || org.teamId === selectedTeam
    const statusFilter = selectedStatus === "all" || org.status === selectedStatus
    const planFilter = selectedPlan === "all" || org.plan === selectedPlan

    return teamFilter && statusFilter && planFilter
  })

  const showSidebar = selectedTeam !== "all"

  const columns: ColumnDef<Organization>[] = [
    {
      accessorKey: "name",
      header: "Organization",
      size: 250,
      cell: ({ row }) => (
        <div className="flex items-center gap-2 min-w-0">
          <div className="h-8 w-8 rounded-lg bg-gradient-to-r from-[#b4a0ff]/20 to-[#ffb4a0]/20 flex items-center justify-center flex-shrink-0">
            <Building2 className="h-4 w-4 text-foreground" />
          </div>
          <div className="min-w-0 flex-1">
            <div className="font-medium truncate">{row.getValue("name")}</div>
            <div className="text-xs text-muted-foreground truncate">{row.original.industry}</div>
          </div>
        </div>
      ),
    },
    {
      accessorKey: "teamName",
      header: "Team",
      size: 110,
      cell: ({ row }) => (
        <Badge variant="outline" className="truncate">
          {MOCK_DATA.teams.find((t) => t.id === row.original.teamId)?.name || "Unknown Team"}
        </Badge>
      ),
    },
    {
      accessorKey: "status",
      header: "Status",
      size: 100,
      cell: ({ row }) => <StatusBadge status={row.getValue("status")} size="sm" />,
    },
    {
      accessorKey: "plan",
      header: "Plan",
      size: 120,
      cell: ({ row }) => (
        <Badge variant="secondary" className="truncate capitalize">
          {row.getValue<string>("plan")}
        </Badge>
      ),
    },
    {
      accessorKey: "adAccountsCount",
      header: "Accounts",
      size: 80,
      cell: ({ row }) => <div className="text-center font-medium">{row.original.adAccountsCount}</div>,
    },
    {
      id: "actions",
      header: "",
      enableHiding: false,
      size: 50,
      cell: ({ row }) => (
        <Link href={`/admin/teams/${row.original.teamId}/organizations/${row.original.id}`} className="inline-flex">
          <ChevronRight className="h-4 w-4 text-muted-foreground" />
        </Link>
      ),
    },
  ]

  return (
    <div className="flex h-full bg-background overflow-hidden">
      {showSidebar && (
        <div className="w-80 bg-card border-r border-border p-6 space-y-6">
          <div>
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-medium">{MOCK_DATA.teams.find((t) => t.id === selectedTeam)?.name || "Team"}</h3>
              <Button
                variant="ghost"
                size="sm"
                className="text-primary hover:text-primary/80"
                onClick={() => setSelectedTeam("all")}
              >
                View all
              </Button>
            </div>

            <div className="p-3 bg-gradient-to-r from-[#b4a0ff]/10 to-[#ffb4a0]/10 rounded-lg">
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 bg-gradient-to-r from-[#b4a0ff] to-[#ffb4a0] rounded-full flex items-center justify-center">
                  <span className="text-sm font-semibold text-white">
                    {MOCK_DATA.teams.find((t) => t.id === selectedTeam)?.name.charAt(5) || "T"}
                  </span>
                </div>
                <div>
                  <p className="font-medium">{MOCK_DATA.teams.find((t) => t.id === selectedTeam)?.name}</p>
                  <p className="text-xs text-muted-foreground">{filteredOrganizations.length} organizations</p>
                </div>
              </div>
            </div>
          </div>

          <div>
            <h3 className="font-medium mb-4">Team Overview</h3>
            <div className="space-y-3">
              <div className="flex items-center justify-between p-3 bg-background rounded-lg">
                <span className="text-sm text-muted-foreground">Total Organizations</span>
                <span className="font-semibold">{filteredOrganizations.length}</span>
              </div>
              <div className="flex items-center justify-between p-3 bg-background rounded-lg">
                <span className="text-sm text-muted-foreground">Active</span>
                <span className="font-semibold text-green-600">
                  {filteredOrganizations.filter((org) => org.status === "active").length}
                </span>
              </div>
              <div className="flex items-center justify-between p-3 bg-background rounded-lg">
                <span className="text-sm text-muted-foreground">Total Accounts</span>
                <span className="font-semibold">
                  {filteredOrganizations.reduce((sum, org) => sum + org.adAccountsCount, 0)}
                </span>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="flex-1 flex flex-col overflow-hidden min-h-0">
        <div className="flex-shrink-0 p-4 pb-0">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4">
              <Select value={selectedTeam} onValueChange={setSelectedTeam}>
                <SelectTrigger className="w-[140px]">
                  <SelectValue placeholder="All Teams" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Teams</SelectItem>
                  {MOCK_DATA.teams.map((team) => (
                    <SelectItem key={team.id} value={team.id}>
                      {team.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                <SelectTrigger className="w-[140px]">
                  <SelectValue placeholder="All Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="active">Active</SelectItem>
                  <SelectItem value="pending">Pending</SelectItem>
                  <SelectItem value="suspended">Suspended</SelectItem>
                  <SelectItem value="inactive">Inactive</SelectItem>
                </SelectContent>
              </Select>

              <Select value={selectedPlan} onValueChange={setSelectedPlan}>
                <SelectTrigger className="w-[140px]">
                  <SelectValue placeholder="All Plans" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Plans</SelectItem>
                  <SelectItem value="starter">Starter</SelectItem>
                  <SelectItem value="professional">Professional</SelectItem>
                  <SelectItem value="enterprise">Enterprise</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        <div className="flex-1 min-h-0 px-6 pb-6 overflow-hidden">
          <div className="h-full overflow-hidden">
            <DataTable
              columns={columns}
              data={filteredOrganizations}
              searchKey="name"
              searchPlaceholder="Search organizations..."
            />
          </div>
        </div>
      </div>
    </div>
  )
}
