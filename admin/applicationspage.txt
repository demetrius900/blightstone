"use client"

import { useState, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { CheckCircle, Clock, LinkIcon } from "lucide-react"
import { formatDistanceToNow } from "date-fns"
import { ApplicationBindingDialog } from "@/components/admin/application-binding-dialog"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { DataTable } from "@/components/ui/data-table"
import type { ColumnDef } from "@tanstack/react-table"
import { ApplicationApprovalDialog } from "@/components/admin/application-approval-dialog"
import { ApplicationReadyDialog } from "@/components/admin/application-ready-dialog"
import { MOCK_DATA } from "@/data/mock-admin-data"
import type { Application } from "@/data/mock-admin-data"

export default function ApplicationsPage() {
  const [applications] = useState(MOCK_DATA.extended.applications)
  const [selectedApplication, setSelectedApplication] = useState<Application | null>(null)
  const [statusFilter, setStatusFilter] = useState("all")
  const [bindingDialogOpen, setBindingDialogOpen] = useState(false)
  const [approvalDialogOpen, setApprovalDialogOpen] = useState(false)
  const [readyDialogOpen, setReadyDialogOpen] = useState(false)

  const filteredApplications = useMemo(() => {
    return applications.filter((app) => {
      const matchesStatus = statusFilter === "all" || app.status === statusFilter
      return matchesStatus
    })
  }, [applications, statusFilter])

  const getStatusInfo = (status: string) => {
    const statusMap = {
      needs_review: {
        label: "Needs Review",
        color: "bg-red-100 text-red-800 border-red-200",
        icon: CheckCircle,
      },
      submitted_to_bluefocus: {
        label: "At BlueFocus",
        color: "bg-blue-100 text-blue-800 border-blue-200",
        icon: Clock,
      },
      needs_assignment: {
        label: "Needs Binding",
        color: "bg-purple-100 text-purple-800 border-purple-200",
        icon: LinkIcon,
      },
    }
    return statusMap[status as keyof typeof statusMap] || statusMap.needs_review
  }

  const stats = useMemo(
    () => ({
      total: applications.length,
      needs_review: applications.filter((a) => a.status === "needs_review").length,
      submitted_to_bluefocus: applications.filter((a) => a.status === "submitted_to_bluefocus").length,
      needs_assignment: applications.filter((a) => a.status === "needs_assignment").length,
    }),
    [applications],
  )

  const columns: ColumnDef<Application>[] = [
    {
      accessorKey: "organizationName",
      header: "Organization",
      size: 300,
      cell: ({ row }) => {
        const app = row.original
        return (
          <div className="flex items-center gap-3 min-w-0">
            <Avatar className="w-8 h-8 flex-shrink-0">
              <AvatarFallback className="text-xs">{app.organizationName.substring(0, 2).toUpperCase()}</AvatarFallback>
            </Avatar>
            <div className="min-w-0 flex-1">
              <div className="font-medium text-sm truncate">{app.organizationName}</div>
              <div className="text-xs text-muted-foreground truncate">{app.businessName}</div>
            </div>
          </div>
        )
      },
    },
    {
      accessorKey: "applicationType",
      header: "Type",
      size: 120,
      cell: ({ row }) => (
        <Badge
          className={
            row.original.applicationType === "new_business"
              ? "bg-green-100 text-green-800 border-green-200"
              : "bg-gray-100 text-gray-800 border-gray-200"
          }
        >
          {row.original.applicationType === "new_business" ? "New" : "Additional"}
        </Badge>
      ),
    },
    {
      accessorKey: "accountsRequested",
      header: "Accounts",
      size: 100,
      cell: ({ row }) => <div className="text-sm text-center">{row.original.accountsRequested}</div>,
    },
    {
      accessorKey: "status",
      header: "Status",
      size: 160,
      cell: ({ row }) => {
        const statusInfo = getStatusInfo(row.original.status)
        const StatusIcon = statusInfo.icon
        return (
          <Badge className={`text-xs ${statusInfo.color}`}>
            <StatusIcon className="h-3 w-3 mr-1" />
            {statusInfo.label}
          </Badge>
        )
      },
    },
    {
      accessorKey: "teamName",
      header: "Team",
      size: 120,
      cell: ({ row }) => (
        <Badge variant="outline" className="text-sm truncate">
          {row.original.teamName}
        </Badge>
      ),
    },
    {
      accessorKey: "submittedAt",
      header: "Submitted",
      size: 120,
      cell: ({ row }) => (
        <div className="text-xs text-muted-foreground">
          {formatDistanceToNow(new Date(row.original.submittedAt), { addSuffix: true })}
        </div>
      ),
    },
    {
      id: "actions",
      header: "Actions",
      size: 140,
      cell: ({ row }) => {
        const app = row.original
        return (
          <div className="flex items-center gap-1">
            {app.status === "needs_review" && (
              <Button
                size="sm"
                className="bg-green-600 hover:bg-green-700 h-7 text-xs text-white"
                onClick={(e) => {
                  e.stopPropagation()
                  setSelectedApplication(app)
                  setApprovalDialogOpen(true)
                }}
              >
                <CheckCircle className="h-3 w-3 mr-1" />
                Approve
              </Button>
            )}
            {app.status === "submitted_to_bluefocus" && (
              <Button
                size="sm"
                className="bg-blue-600 hover:bg-blue-700 h-7 text-xs text-white"
                onClick={(e) => {
                  e.stopPropagation()
                  setSelectedApplication(app)
                  setReadyDialogOpen(true)
                }}
              >
                <Clock className="h-3 w-3 mr-1" />
                Ready
              </Button>
            )}
            {app.status === "needs_assignment" && (
              <Button
                size="sm"
                className="bg-purple-600 hover:bg-purple-700 h-7 text-xs text-white"
                onClick={(e) => {
                  e.stopPropagation()
                  setSelectedApplication(app)
                  setBindingDialogOpen(true)
                }}
              >
                <LinkIcon className="h-3 w-3 mr-1" />
                Bind
              </Button>
            )}
          </div>
        )
      },
    },
  ]

  return (
    <div className="h-full flex flex-col overflow-hidden">
      <div className="flex-shrink-0 p-4 pb-0">
        <div className="flex items-center justify-between mb-4">
          <div className="text-sm text-muted-foreground">{stats.total} applications total</div>
        </div>

        <div className="flex items-center justify-between">
          <Tabs value={statusFilter} onValueChange={setStatusFilter} className="w-auto">
            <TabsList>
              <TabsTrigger value="all">All ({stats.total})</TabsTrigger>
              <TabsTrigger value="needs_review">Needs Review ({stats.needs_review})</TabsTrigger>
              <TabsTrigger value="submitted_to_bluefocus">At BlueFocus ({stats.submitted_to_bluefocus})</TabsTrigger>
              <TabsTrigger value="needs_assignment">Needs Binding ({stats.needs_assignment})</TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
      </div>

      <div className="flex-1 min-h-0 px-6 pb-6">
        <DataTable
          columns={columns}
          data={filteredApplications}
          searchKey="organizationName"
          searchPlaceholder="Search applications..."
        />
      </div>

      <ApplicationApprovalDialog
        open={approvalDialogOpen}
        onOpenChange={setApprovalDialogOpen}
        application={selectedApplication || { id: "", businessName: "", organizationName: "", accountsRequested: 0 }}
        onApprove={async (applicationId) => {
          console.log("Approving application:", applicationId)
        }}
      />

      <ApplicationReadyDialog
        open={readyDialogOpen}
        onOpenChange={setReadyDialogOpen}
        application={selectedApplication || { id: "", businessName: "", organizationName: "", accountsRequested: 0 }}
        onMarkReady={async (applicationId) => {
          console.log("Marking application ready:", applicationId)
        }}
      />

      <ApplicationBindingDialog
        open={bindingDialogOpen}
        onOpenChange={setBindingDialogOpen}
        applicationId={selectedApplication?.id || ""}
        onBind={async () => {}}
      />
    </div>
  )
}
